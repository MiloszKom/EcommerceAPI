services:
  keycloak:
    image: quay.io/keycloak/keycloak:26.4.0
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KC_DB: dev-file
      KC_DB_FILE: /opt/keycloak/data/keycloak
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    command: start-dev
    volumes:
      - keycloak_data:/opt/keycloak/data
    extends:
      file: common-config.yml
      service: network-deploy-service

  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      ecommerce-network:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:latest
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service


  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
#    build:
#        context: ./../../configserver
#        dockerfile: Dockerfile
    image: "miloszk/configserver:v3"
    container_name: "configserver-ms"
    ports:
      - "8888:8888"
    env_file:
      - ../../configserver/.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8888/actuator/health/readiness || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      OTEL_SERVICE_NAME: "configserver"

  eurekaserver:
#    build:
#        context: ./../../eurekaserver
#        dockerfile: Dockerfile
    image: "miloszk/eurekaserver:v3"
    container_name: eurekaserver-ms
    ports:
      - "8761:8761"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      OTEL_SERVICE_NAME: "eurekaserver"
      SPRING_APPLICATION_NAME: "eurekaserver"

  userdb:
    container_name: userdb
    environment:
      POSTGRES_DB: userdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d userdb" ]
    volumes:
      - user_data:/var/lib/postgresql/data
    extends:
      file: common-config.yml
      service: microservice-db-config

  user-service:
#    build:
#        context: ./../../user-service
#        dockerfile: Dockerfile
    image: "miloszk/user-service:v5"
    container_name: "user-ms"
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail --silent localhost:8081/actuator/health/readiness || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      userdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      keycloak:
        condition: service_started
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      OTEL_SERVICE_NAME: "user-service"

  productdb:
    container_name: productdb
    environment:
      POSTGRES_DB: productdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d productdb" ]
    volumes:
      - product_data:/var/lib/postgresql/data
    extends:
      file: common-config.yml
      service: microservice-db-config


  product-service:
#    build:
#      context: ./../../product-service
#      dockerfile: Dockerfile
    image: "miloszk/product-service:v5"
    container_name: "product-ms"
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail --silent localhost:8082/actuator/health/readiness || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      productdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      OTEL_SERVICE_NAME: "product-service"

  cartdb:
    container_name: cartdb
    environment:
      POSTGRES_DB: cartdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d cartdb" ]
    volumes:
      - cart_data:/var/lib/postgresql/data
    extends:
      file: common-config.yml
      service: microservice-db-config

  cart-service:
#    build:
#      context: ./../../cart-service
#      dockerfile: Dockerfile
    image: "miloszk/cart-service:v5"
    container_name: "cart-ms"
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail --silent localhost:8083/actuator/health/readiness || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      cartdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      OTEL_SERVICE_NAME: "cart-service"

  orderdb:
    container_name: orderdb
    environment:
      POSTGRES_DB: orderdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d orderdb" ]
    volumes:
      - order_data:/var/lib/postgresql/data
    extends:
      file: common-config.yml
      service: microservice-db-config

  order-service:
#    build:
#      context: ./../../order-service
#      dockerfile: Dockerfile
    image: "miloszk/order-service:v5"
    container_name: "order-ms"
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail --silent localhost:8084/actuator/health/readiness || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      orderdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      OTEL_SERVICE_NAME: "order-service"

  api-gateway:
#    build:
#      context: ./../../api-gateway
#      dockerfile: Dockerfile
    image: "miloszk/api-gateway:v5"
    container_name: api-gateway-ms
    ports:
      - "8080:8080"
    depends_on:
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "api-gateway"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: "http://keycloak:8080/realms/ecommerce-realm"
      OTEL_SERVICE_NAME: "api-gateway"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

volumes:
  keycloak_data:
  user_data:
  product_data:
  cart_data:
  order_data:

networks:
  ecommerce-network:
    driver: "bridge"

